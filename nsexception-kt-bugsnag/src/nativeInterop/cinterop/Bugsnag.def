language = Objective-C
---
// The following are snippets from the Bugsnag Cocoa SDK used to generate Kotlin stubs.
//
// Copyright (c) 2012 Bugsnag, https://bugsnag.com/
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software
// is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

#import <Foundation/Foundation.h>

// https://github.com/bugsnag/bugsnag-cocoa/blob/6bcd46f5f8dc06ac26537875d501f02b27d219a9/Bugsnag/Payload/BugsnagStackframe+Private.h

@interface BugsnagStackframe

+ (NSArray<BugsnagStackframe *> *)stackframesWithCallStackReturnAddresses:(NSArray<NSNumber *> *)callStackReturnAddresses;

@end

// https://github.com/bugsnag/bugsnag-cocoa/blob/6bcd46f5f8dc06ac26537875d501f02b27d219a9/Bugsnag/include/Bugsnag/BugsnagError.h

typedef NS_OPTIONS(NSUInteger, BSGErrorType) {
    BSGErrorTypeCocoa,
    BSGErrorTypeC,
    BSGErrorTypeReactNativeJs
};

@interface BugsnagError : NSObject

@property (copy, nullable, nonatomic) NSString *errorClass;

@property (copy, nullable, nonatomic) NSString *errorMessage;

@property (copy, nonnull, nonatomic) NSArray<BugsnagStackframe *> *stacktrace;

@property (nonatomic) BSGErrorType type;

@end

// https://github.com/bugsnag/bugsnag-cocoa/blob/6bcd46f5f8dc06ac26537875d501f02b27d219a9/Bugsnag/include/Bugsnag/BugsnagFeatureFlag.h

@interface BugsnagFeatureFlag : NSObject

@property (readonly, nonatomic) NSString *name;

@end

// https://github.com/bugsnag/bugsnag-cocoa/blob/6bcd46f5f8dc06ac26537875d501f02b27d219a9/Bugsnag/include/Bugsnag/BugsnagEvent.h

typedef NS_ENUM(NSUInteger, BSGSeverity) {
    BSGSeverityError,
    BSGSeverityWarning,
    BSGSeverityInfo,
};

@interface BugsnagEvent : NSObject

@property (readwrite, nonatomic) BSGSeverity severity;

@property (readwrite, copy, nonnull, nonatomic) NSArray<BugsnagError *> *errors;

@property (readonly, strong, nonnull, nonatomic) NSArray<BugsnagFeatureFlag *> *featureFlags;

@property (readwrite, nonatomic) BOOL unhandled;

@end

// https://github.com/bugsnag/bugsnag-cocoa/blob/6bcd46f5f8dc06ac26537875d501f02b27d219a9/Bugsnag/include/Bugsnag/BugsnagConfiguration.h

typedef BOOL (^BugsnagOnErrorBlock)(BugsnagEvent *_Nonnull event);

typedef BOOL (^BugsnagOnSendErrorBlock)(BugsnagEvent *_Nonnull event);

typedef id<NSObject> BugsnagOnSendErrorRef;

@interface BugsnagConfiguration : NSObject

- (BugsnagOnSendErrorRef)addOnSendErrorBlock:(BugsnagOnSendErrorBlock)block;

@end

// https://github.com/bugsnag/bugsnag-cocoa/blob/6bcd46f5f8dc06ac26537875d501f02b27d219a9/Bugsnag/include/Bugsnag/Bugsnag.h

@interface Bugsnag : NSObject

+ (void)notify:(NSException *_Nonnull)exception
         block:(BugsnagOnErrorBlock _Nullable)block;

+ (void)addFeatureFlagWithName:(nonnull NSString *)name;

@end

// https://github.com/bugsnag/bugsnag-cocoa/blob/6bcd46f5f8dc06ac26537875d501f02b27d219a9/Bugsnag/include/Bugsnag/BugsnagFeatureFlagStore.h

@interface BugsnagConfiguration ()

- (void)clearFeatureFlagWithName:(NSString *)name;

@end

// We need the following wrapper function because of
// https://github.com/JetBrains/kotlin/blob/7bc0132cca92464344ded194f2273c56699f99ca/kotlin-native/runtime/src/main/cpp/ObjCExport.mm#L515

void NSExceptionKt_BugsnagConfigAddOnSendErrorBlock(BugsnagConfiguration* config, BugsnagOnSendErrorBlock block) {
    [config addOnSendErrorBlock:^BOOL(BugsnagEvent * _Nonnull event) {
        return block(event);
    }];
}

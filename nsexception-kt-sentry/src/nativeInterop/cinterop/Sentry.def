language = Objective-C
---
#import <Foundation/Foundation.h>

// https://github.com/getsentry/sentry-cocoa/blob/167de8bea5a0effef3aaa5c99c540088de30b361/Sources/Sentry/Public/SentryStacktrace.h

@class SentryStacktrace;

// https://github.com/getsentry/sentry-cocoa/blob/167de8bea5a0effef3aaa5c99c540088de30b361/Sources/Sentry/Public/SentryMechanism.h

@interface SentryMechanism : NSObject

- (instancetype)initWithType:(NSString *)type;

@property (nonatomic, copy) NSNumber *_Nullable handled;

@end

// https://github.com/getsentry/sentry-cocoa/blob/167de8bea5a0effef3aaa5c99c540088de30b361/Sources/Sentry/Public/SentryException.h

@interface SentryException : NSObject

- (instancetype)initWithValue:(NSString *)value type:(NSString *)type;

@property (nonatomic, strong) SentryMechanism *_Nullable mechanism;

@property (nonatomic, copy) NSNumber *_Nullable threadId;

@property (nonatomic, strong) SentryStacktrace *_Nullable stacktrace;

@end

// https://github.com/getsentry/sentry-cocoa/blob/f893682911568e14782eb0bb507af5a12332b033/Sources/Sentry/Public/SentryDefines.h

typedef NS_ENUM(NSUInteger, SentryLevel) {
    kSentryLevelNone = 0,
    kSentryLevelDebug = 1,
    kSentryLevelInfo = 2,
    kSentryLevelWarning = 3,
    kSentryLevelError = 4,
    kSentryLevelFatal = 5
};

// https://github.com/getsentry/sentry-cocoa/blob/167de8bea5a0effef3aaa5c99c540088de30b361/Sources/Sentry/Public/SentryThread.h

@interface SentryThread : NSObject

@property (nonatomic, copy) NSNumber *threadId;

@property (nonatomic, strong) SentryStacktrace *_Nullable stacktrace;

@property (nonatomic, copy) NSNumber *_Nullable crashed;

@property (nonatomic, copy) NSNumber *_Nullable current;

@end

// https://github.com/getsentry/sentry-cocoa/blob/167de8bea5a0effef3aaa5c99c540088de30b361/Sources/Sentry/Public/SentryEvent.h

@interface SentryEvent : NSObject

- (instancetype)initWithLevel:(enum SentryLevel)level NS_DESIGNATED_INITIALIZER;

@property (nonatomic, copy) NSString *platform;

@property (nonatomic, strong) NSArray<SentryThread *> *_Nullable threads;

@property (nonatomic, strong) NSArray<SentryException *> *_Nullable exceptions;

@end

// https://github.com/getsentry/sentry-cocoa/blob/167de8bea5a0effef3aaa5c99c540088de30b361/Sources/Sentry/Public/SentryId.h

@class SentryId;

// https://github.com/getsentry/sentry-cocoa/blob/b711c798053bb01aba315478b86e84f53dd239a3/Sources/Sentry/include/SentrySDK+Private.h

@interface SentrySDK : NSObject

+ (void)captureCrashEvent:(SentryEvent *)event;

@end

// https://github.com/getsentry/sentry-cocoa/blob/167de8bea5a0effef3aaa5c99c540088de30b361/Sources/Sentry/include/SentryThreadInspector.h

@interface SentryThreadInspector : NSObject

- (NSArray<SentryThread *> *)getCurrentThreadsWithStackTrace;

@end

// https://github.com/getsentry/sentry-cocoa/blob/c06c857ff90589996b75f63ce289038ffbb29c24/Sources/SentryCrash/Recording/Tools/SentryHook.h

typedef struct sentrycrash_async_backtrace_s sentrycrash_async_backtrace_t;
struct sentrycrash_async_backtrace_s {
    size_t refcount;
    sentrycrash_async_backtrace_t *async_caller;
    size_t len;
    void *backtrace[128];
};

// https://github.com/getsentry/sentry-cocoa/blob/02de834216db8870d340851f5aad219ceae3d167/Sources/SentryCrash/Recording/Tools/SentryCrashStackCursor.h

typedef struct {
    /** Current address in the stack trace. */
    uintptr_t address;

    /** The name (if any) of the binary image the current address falls
     * inside. */
    const char *imageName;

    /** The starting address of the binary image the current address falls
     * inside. */
    uintptr_t imageAddress;

    /** The name (if any) of the closest symbol to the current address. */
    const char *symbolName;

    /** The address of the closest symbol to the current address. */
    uintptr_t symbolAddress;
} SentryCrashStackEntry;

typedef struct SentryCrashStackCursor {
    SentryCrashStackEntry stackEntry;

    struct {
        /** Current depth as we walk the stack (1-based). */
        int currentDepth;

        /** If true, cursor has given up walking the stack. */
        bool hasGivenUp;

        /** The current async caller we are chaining to. */
        sentrycrash_async_backtrace_t *current_async_caller;
    } state;

    /** Reset the cursor back to the beginning. */
    void (*resetCursor)(struct SentryCrashStackCursor *);

    /** Advance the cursor to the next stack entry. */
    bool (*advanceCursor)(struct SentryCrashStackCursor *);

    /** Attempt to symbolicate the current address, filling in the fields in
     * stackEntry. */
    bool (*symbolicate)(struct SentryCrashStackCursor *);

    /** Pointer to an optional async stacktrace. */
    sentrycrash_async_backtrace_t *async_caller;

    /** Internal context-specific information. */
    void *context[100];
} SentryCrashStackCursor;

// https://github.com/getsentry/sentry-cocoa/blob/02de834216db8870d340851f5aad219ceae3d167/Sources/Sentry/SentryStacktraceBuilder.m

@interface SentryStacktraceBuilder : NSObject

- (SentryStacktrace *)retrieveStacktraceFromCursor:(SentryCrashStackCursor)stackCursor;

@end

// https://github.com/getsentry/sentry-cocoa/blob/167de8bea5a0effef3aaa5c99c540088de30b361/Sources/Sentry/SentryThreadInspector.m

@interface SentryThreadInspector ()

@property (nonatomic, strong) SentryStacktraceBuilder *stacktraceBuilder;

@end

// https://github.com/getsentry/sentry-cocoa/blob/37e9eabde0406a2a61b752f099cab0e5e08187fe/Sources/Sentry/SentryClient.m

@interface SentryClient : NSObject

@property (nonatomic, strong) SentryThreadInspector *threadInspector;

@end

// https://github.com/getsentry/sentry-cocoa/blob/167de8bea5a0effef3aaa5c99c540088de30b361/Sources/Sentry/Public/SentryHub.h

@interface SentryHub : NSObject

- (SentryClient *_Nullable)getClient;

@end

// https://github.com/getsentry/sentry-cocoa/blob/167de8bea5a0effef3aaa5c99c540088de30b361/Sources/Sentry/SentrySDK.m

@interface SentrySDK ()

@property (class) SentryHub *currentHub;

@end

// https://github.com/getsentry/sentry-cocoa/blob/167de8bea5a0effef3aaa5c99c540088de30b361/Sources/SentryCrash/Recording/Monitors/SentryCrashMonitor_NSException.m

extern void sentrycrashsc_initWithBacktrace(SentryCrashStackCursor *cursor, const uintptr_t *backtrace, int backtraceLength, int skipEntries);

SentryCrashStackCursor NSExceptionKt_SentryCrashStackCursorFromNSException(NSException *exception) {
    NSArray *addresses = [exception callStackReturnAddresses];
    NSUInteger numFrames = addresses.count;
    uintptr_t *callstack = malloc(numFrames * sizeof(*callstack));
    assert(callstack != NULL);
    for (NSUInteger i = 0; i < numFrames; i++) {
        callstack[i] = (uintptr_t)[addresses[i] unsignedLongLongValue];
    }
    SentryCrashStackCursor cursor;
    sentrycrashsc_initWithBacktrace(&cursor, callstack, (int)numFrames, 0);
    return cursor;
    // TODO: sentrycrash_async_backtrace_decref
}

void NSExceptionKt_SentryThreadSetCrashed(SentryThread *thread) {
    thread.crashed = @(YES);
}

void NSExceptionKt_SentryMechanismSetNotHandled(SentryMechanism *mechanism) {
    mechanism.handled = @(NO);
}
